# SPDX-License-Identifier: Apache-2.0

name: Test

on: [push, pull_request]

jobs:
  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: dtolnay/rust-toolchain@1.85.1
        id: rust-toolchain
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-check-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-check-
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-
            ${{ runner.os }}-cargo-
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "33.x"
      - run: cargo run
        working-directory: gen
      - run: cargo check --all-targets --no-default-features
      - run: cargo check --all-targets --all-features

  check:
    name: Check
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-check-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-check-
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-
            ${{ runner.os }}-cargo-
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "33.x"
      - run: cargo run
        working-directory: gen
      - run: cargo check --all-targets --no-default-features
      - run: cargo check --all-targets --all-features
      - run: cargo check --all-targets --no-default-features --features extensions
      - run: cargo check --all-targets --no-default-features --features semver
      - run: cargo check --all-targets --no-default-features --features serde
      - run: cargo check --all-targets --no-default-features --features parse

  test:
    name: Test
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-test-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-test-
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-
            ${{ runner.os }}-cargo-
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "33.x"
      - run: cargo run
        working-directory: gen
      - run: cargo test --all-targets --no-default-features
      - run: cargo test --all-targets --all-features
      - run: cargo test --doc --all-features
      - run: cargo test --doc --no-default-features

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          components: clippy
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-clippy-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-clippy-
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-
            ${{ runner.os }}-cargo-
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "33.x"
      - run: cargo run
        working-directory: gen
      - run: cargo clippy --all-targets --no-default-features -- -Dwarnings
      - run: cargo clippy --all-targets --all-features -- -Dwarnings

  package:
    name: Package
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-package-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-package-
            ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-
            ${{ runner.os }}-cargo-
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: "33.x"
      - run: cargo run
        working-directory: gen
      - run: cargo build --all-features
      - run: cargo package --all-features --allow-dirty
